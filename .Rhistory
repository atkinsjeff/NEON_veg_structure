fitresiduals <-lm(CVI_ABOVE$RESID~CVI_ABOVE$WFPS)
summary(fitresiduals)
R2BELOW
p.WFPS_veg_new
?cv
?coeff.v
require(psych)
describe(CVI_ABOVE$WFPS)
describeBy(CVI_ABOVE$WFPS, CVI_ABOVE$YEAR)
ls
ls()
ls()
require(knitr)
getwd()
# 15 lines (12 sloc)  428 Bytes
# #updateR, by CA Hamm (version 0.1) 19 October 2014
#
# updateR v 0.1 - (CA Hamm - 19 October 2014)
#
# This is a very simple R script to ease the transition between
# major updates in R that require you to reinstall / recompile packages.
# At present, this script only works with packages that available on the CRAN.
#
# This script works in two phases. Phase 1 is run in the OLD version of R,
# and Phase 2 is run in the NEW version of R. The steps, which are also
# commented in the script, are:
#
#      1) - Set the working directory where you want to hold a temporary
# file - Create an object that contains the names of your installed packages -
#      Save the file
#
# 2) - In the new version of R set the working directory to where you saved
# the file - Load the file - Execute the for loop that will download and intall
# he packages named in your list
#
# Note, this script does not download packages from Bioconductor, Github,
# or the R Forge. However, the packages that were not installed will be output to your console so you will know what packages failed to install.
#--run in the old version of R
# setwd("~/Directory/WhereYouWantIt")
packages <- installed.packages()[,"Package"]
save(packages, file="Rpackages")
#--run in the new version
setwd("~/Directory/WhereYouPutIt")
load("Rpackages")
for (p in setdiff(packages, installed.packages()[,"Package"]))
install.packages(p)
# To remove all packages except the base
#remove.packages(packages)
setwd("~/oldpackages")
packages <- installed.packages()[,"Package"]
save(packages, file="Rpackages")
install.packages("installr") # install
setInternet2(TRUE)
installr::updateR() # updating R.
install.packages("Biobase")
install.packages("biomaRt")
install.packages("edgeR")
install.packages("limma")
install.packages("dplyr")
install.packages("exlainr")
install.packages("Biobase")
require(explainr)
install.packages("explainr")
update.packages()
install.packages("ggplot2")
devtools::install_github("hilaryparker/explainr")
install.packages("tidyr")
require(explainr)
attach(cars)
str(cars)
fit.cars <- aov(speed ~ dist)
clear
#updateR, by CA Hamm (version 0.1) 19 October 2014
#--run in the old version of R
setwd("~/Directory/WhereYouWantIt")
packages <- installed.packages()[,"Package"]
save(packages, file="Rpackages")
getwd()
setwd("~/updateR")
packages <- installed.packages()[,"Package"]
save(packages, file="Rpackages")
460.5
4^0.5
14.125^2
22.3595^2
26.5181^2
15.44^2
26.9436^2
23.8705^2
30.95^2
49.68.3^2
49.683^2
199.516+(14.7123^2)
499.94+(13.37^2)
703.20+(25.8203^2)
238.39+(11.67^2)
725.95+(19.3835^2)
569.80+(19.7551^2)
957.90+(41.40^2)
2468.4+(40.983^2)
getwd()
require(devtools)
install_github("atkinsjeff/forestr")
require(forestr)
# this will run an example data set on a transect from Ordway-Swisher Biological Station
process_pcl(osbs)
?csc_metrics
require(devtools)
install_github("atkinsjeff/forestr")
require(forestr)
# this will run an example data set on a transect from Ordway-Swisher Biological Station
process_pcl(osbs)
getwd()
#Code written 2014-015 by Jeff Atkins (jeffatkins@virginia.edu or via Twitter @atkinsjeff)
#This code analyzes data from the MesoWest Weather Station at Bearden Knob (BDKW2) located at the top of the Weimer Run Watershed in David, WV
#This code also analyzes long term trends in precipitation using NCDC data for the Weimer Run Watershed
#Dataset files are uploaded into figshare
#and is in suppor of research outlined in the manuscript Atkins et al. 2014 Biogeosciences (article title final here)
# Station data downloaded from http://mesowest.utah.edu/ for the Bearden Knob Weather Station (BDKW2)
#
# http://mesowest.utah.edu/html/help/main_index.html#usage
#
# Column descriptions and units:
# DATETIME - date (mm/dd/yyyy) with time (hh:mm)
# TEMP - air temperature in degrees Celsius
# RELH - Relative humidity (%)
# WIND - hourly wind speed (m/s)
# GUST - peak wind speed gust during hour (m/s)
# DIR - wind speed direction (compass degrees)
# QFLG - Quality of data (OK = good to use; CAUTION = examine for incongruity)
# SOLAR - Incoming solar radiation (w/m^2)
# PRECIPcum - cumulative precipitation (cm)
# PRECIP - precip during past hour (cm)
# PEAK - duplicate column of max wind gust (m/s)
# PEAKDIR - direction of PEAK and GUST columns (compass degrees)
# DWP - dew point (degrees Celsius)
#
#required packages
require(xts)
require(ggplot2)
require(psych)
library(Hmisc)
library(lmtest)
library(car)
library(gtable)
library(gridExtra)
require(lubridate)
require(plyr)
require(dplyr)
require(tidyr)
#Importing MesoWest data that has been imported to figshare
MAIN2010 <-read.csv("http://files.figshare.com/1893326/BDKW_2010.csv",head=TRUE, strip.white=TRUE )
MAIN2011 <-read.csv("http://files.figshare.com/1893327/BDKW_2011.csv",head=TRUE, strip.white=TRUE )
MAIN2012 <-read.csv("http://files.figshare.com/1893328/BDKW_2012.csv",head=TRUE, strip.white=TRUE )
MAIN2010$PRECIP <-as.numeric(as.character(MAIN2010$PRECIP))
MAIN2011$PRECIP <-as.numeric(as.character(MAIN2011$PRECIP))
MAIN2012$PRECIP <-as.numeric(as.character(MAIN2012$PRECIP))
#converting DATETIME to POSIXct class
MAIN2010$DATETIME <-  as.POSIXct(strptime(as.character(MAIN2010$DATETIME), format = "%m-%d-%Y %H:%M"))
MAIN2011$DATETIME <-  as.POSIXct(strptime(as.character(MAIN2011$DATETIME), format = "%m-%d-%Y %H:%M"))
MAIN2012$DATETIME <-  as.POSIXct(strptime(as.character(MAIN2012$DATETIME), format = "%m-%d-%Y %H:%M"))
### Trying to get monthlies
MAIN2010 %>%
group_by( year = year(DATETIME), mon = month(DATETIME)) %>%
summarise( mean_temp = mean(TEMP, na.rm = TRUE), total_precip = sum(PRECIP, na.rm = TRUE)) -> m2010
m2010 <-   data.frame(m2010)
MAIN2011 %>%
group_by( year = year(DATETIME), mon = month(DATETIME)) %>%
summarise( mean_temp = mean(TEMP, na.rm = TRUE), total_precip = sum(PRECIP, na.rm = TRUE)) -> m2011
m2011 <-   data.frame(m2011)
MAIN2012 %>%
group_by( year = year(DATETIME), mon = month(DATETIME)) %>%
summarise( mean_temp = mean(TEMP, na.rm = TRUE), total_precip = sum(PRECIP, na.rm = TRUE)) -> m2012
m2012 <-   data.frame(m2012)
# monthlies
df <- rbind(m2010, m2011, m2012)
#####
#####
# gettind dailies for PET calculation
### Trying to get monthlies
MAIN2010 %>%
group_by( year = year(DATETIME), mon = month(DATETIME), day = day(DATETIME)) %>%
summarise( mean_temp = mean(TEMP, na.rm = TRUE)) -> d2010
d2010 <-   data.frame(d2010)
MAIN2011 %>%
group_by( year = year(DATETIME), mon = month(DATETIME), day = day(DATETIME)) %>%
summarise( mean_temp = mean(TEMP, na.rm = TRUE)) -> d2011
d2011 <-   data.frame(d2011)
MAIN2012 %>%
group_by( year = year(DATETIME), mon = month(DATETIME), day = day(DATETIME)) %>%
summarise( mean_temp = mean(TEMP, na.rm = TRUE)) -> d2012
d2012 <-   data.frame(d2012)
df.day <- rbind(d2010, d2011, d2012)
##
# # Daylength info from:                o  ,    o  ,                   DAVIS, WEST VIRGINIA                Astronomical Applications Dept.
# Location: W079 28, N39 08                   Eastern Standard Time               U. S. Naval Observatory
# Washington, DC  20392-5420
days <- read.csv("wv_daylength_2012.csv")
m <- gather(days, "mon", "length", 2:13)
# cleaning up the daylength file
m$mon <- substring(m$mon, 2)
m$mon <- as.numeric(m$mon)
#making time a decimal
m$length <- sapply(strsplit(m$length,":"),
function(x) {
x <- as.numeric(x)
x[1]+x[2]/60
}
)
#clean out empty rows
m <- na.omit(m)
#Check structure
str(m)
#change daylength to fraction of 12 hr periods
m$length <- m$length / 12
m$year <- 2012
m <- m[,c(4,1,2,3)]
day.length.2012 <- m
#master merge
df.daylength <- rbind(day.length.2010, day.length.2011, day.length.2012)
write.csv(df.daylength, "wv_daylength_2010_2012.csv")
df.days <- merge(df.day, df.daylength)
attach(df.days)
df.days <- df.days[order(year, mon, day),]
detach(df.days)
# calculate saturated water vapor density in g m^-3
df.days$qt <- 4.8046 * exp(0.0635 * df.days$mean_temp)
# calculate PET in inches from Harmon, 1963 (http://hydrologie.org/redbooks/a063/063006.pdf)
df.days$pet <- 0.0065 * df.days$length * df.days$qt
#change pet to mm
df.days$pet <- df.days$pet * 25.4
# aggregate monthly pet
df.days %>%
group_by( year, mon) %>%
summarise( pet = mean(pet, na.rm = TRUE)) -> df.pet
df.pet <-   data.frame(df.pet)
#######
# To bring them all together
df.cdi <- merge(df, df.pet)
#convert precip to mm and rename
df.cdi$total_precip <- df.cdi$total_precip * 10
names(df.cdi)[names(df.cdi) == 'total_precip'] <- 'p'
names(df.cdi)[names(df.cdi) == 'mean_temp'] <- 't'
# Running checks
df.cdi%>%
group_by( year) %>%
summarise( ppt = sum(total_precip, na.rm = TRUE))
# making the intermediates for CDI calculations
# from Adiar et al. 2008, GCB (https://www.fs.fed.us/pnw/pubs/journals/pnw_2008_adair001.pdf)
df.cdi$ft <- 0.5766 * exp(308.56 * ( (1/56.02) - (1 / ((273+df.cdi$t) - 227.13)) ))
df.cdi$fw <- 1 / (1 + 30 * exp(-8.5 * (df.cdi$p / df.cdi$pet)))
df.cdi$cdi <- df.cdi$ft * df.cdi$fw
## Now let's calculate CDI by year
df.cdi%>%
group_by(year) %>%
summarise( cdi = mean(cdi, na.rm = TRUE))
cdi <- mean(df.cdi$cdi)
k <- -0.5278
x <- c(1:730)
x <- data.frame(x)
x$x <- x$x / 365
# calculate mass remaining based on CDI, time, and k
x$mt <- 100  * exp( (k * cdi * x$x)  )
plot(x$x, x$mt)
# Sources
# http://www.nature.com/nclimate/journal/v4/n7/extref/nclimate2251-s1.pdf
# http://onlinelibrary.wiley.com/doi/10.1111/j.1365-2486.2008.01672.x/full
# http://hyperphysics.phy-astr.gsu.edu/hbase/Kinetic/watvap.html
# https://www.fs.fed.us/pnw/pubs/journals/pnw_2008_adair001.pdf
# http://hydrologie.org/redbooks/a063/063006.pdf
# To bring them all together
df.cdi <- merge(df, df.pet)
df
df.days %>%
group_by( year, mon) %>%
summarise( pet = mean(pet, na.rm = TRUE)) -> df.pet
df.pet <-   data.frame(df.pet)
df.days <- merge(df.day, df.daylength)
#master merge
df.daylength <- rbind(day.length.2010, day.length.2011, day.length.2012)
m
days
days <- read.csv("wv_daylength_2012.csv")
dim(tree.info)
# Making this script to focus on spatializing tree data for Bob
require(maps)
require(maptools)
require(mapproj)
require(rgdal)
require(plyr)
require(dplyr)
setwd("C:/github/NEON_veg_structure/")
# First we bring in the reference points from NEON reference data
ref.points <- read.csv("./data/pointID_spatialData_towerPlots.csv")
str(ref.points)
# Then we bring in all of the tree marker data. This is every tree, by tag, in a plot
# with a spatial ID tag and azimuth
tree.mapping.data <- read.csv("./data/vst_mappingTagging2015_goughSites.csv")
sum(is.na(tree.mapping.data$pointID))
df.tree <- join(tree.mapping.data, ref.points, type = "left", match = "all")
sum(is.na(tree.mapping.data$pointID))
# notes from Atticus
x <- distance * cos(theta)
y <- distance * sin(theta)
# the theta is stemAzimuth
# distance is stemDistance
# Now we use Trig, hopefully
df.tree$x <- df.tree$stemDistance * cos(df.tree$stemAzimuth)
df.tree$y <- df.tree$stemDistance * sin(df.tree$stemAzimuth)
# Then we add our x and y values
df.tree$tree.easting <- df.tree$easting + df.tree$x
df.tree$tree.northing <- df.tree$northing + df.tree$y
tree.info <- read.csv("./data/vst_apparentIndiv2015_goughSites.csv")
dim(tree.info)
dim(ref.points)
dim(df.tree)
#write.csv(tree.info, file = "NEON_veg_mapping_data_merged.CSV")
df <- join(df.tree, tree.info, by = "tagID")
dim(df)
write.csv(df, file = "NEON_veg_mapping_data_merged.CSV")
str(df)
table(df$plotID, df$scientificName)
df %>%
group_by(plotID, scientificName) %>% summarize(count = n())
df %>%
group_by(plotID, scientificName)
data_frame <- data.frame(v = rep(c(1,2, 2, 2), 25))
library("plyr")
data_frame <- ddply(data_frame, .(v), transform, n = length(v))
data_frame
data_frame <- data.frame(v = rep(c(1,2, 2, 2), 25))
data_frame
ddply(data_frame, .(v), transform, n = length(v))
table(df$scientificName)
table(df$scientificName, df$plotID)
sp.table <- table(df$scientificName, df$plotID)
sp.table <-as.data.frame(sp.table)
head(sp.table)
sp.table
unique(df$scientificName)
unique(df$taxonID)
df$scientificName <- tolower(df$scientificName)
unique(df$scientificName)
df$scientificName <- gsub("vitis", "vitis sp.", df$scientificName)
unique(df$scientificName)
df <- join(df.tree, tree.info, by = "tagID")
unique(df$scientificName)
df$scientificName <- tolower(df$scientificName)
unique(df$scientificName)
str(df)
unique(df$growthForm)
df$growthForm <- tolower(df$growthForm)
unique(df$growthForm)
dim(df)
df <- subset(df, df$growthForm == c("sbt", "mbt", "smt"))
df <- subset(df, df$growthForm == "sbt" | df$growthForm == "mbt" | df$growthForm == "smt")
dim(df)
df$scientificName <- tolower(df$scientificName)
df$growthForm <- tolower(df$growthForm)
unique(df$scientificName)
sp.table <- table(df$scientificName, df$plotID)
sp.table
df %>%
group_by( scientificName, plotID) %>% summarize(count = n
())
df %>%
group_by( scientificName, plotID) %>% summarize(count = n())
df %>%
group_by( plotID, scientificName) %>% summarize(scientificName, n())
df %>%
group_by( plotID, scientificName) %>% summarize(scientificName, count = n())
df %>%
group_by(plotID, scientificName) %>% summarize(scientificName, count = n())
df %>%
group_by(plotID) %>% summarize(n_distinct(scientificName))
df %>%
group_by(plotID) %>% summarize(n_distinct(scientificName)) ->df.plot
str(df.plot)
df.plot
data.frame(df.plot)
str(df.plot)
?n_distinct
str(df)
n_distinct(scientificName)
n_distinct(df$scientificName)
df %>%
group_by(plotID) %>% summarize(n_distinct(scientificName)) -> df.plot
data.frame(df.plot)
library("plyr")
data_frame <- ddply(data_frame, .(v), transform, n = length(v))
#writing to disk
#write.csv(df, file = "NEON_veg_mapping_data_merged.CSV")
df <- join(df.tree, tree.info, by = "tagID")
# df <- subset(df, df$growthForm == "sbt" | df$growthForm == "mbt" | df$growthForm == "smt")
df$scientificName <- tolower(df$scientificName)
df$growthForm <- tolower(df$growthForm)
unique(df$scientificName)
sp.table <- table(df$scientificName, df$plotID)
sp.table <-as.data.frame(sp.table)
df %>%
group_by(plotID) %>% summarize(n_distinct(scientificName)) -> df.plot
data.frame(df.plot)
require(maps)
require(maptools)
require(mapproj)
require(rgdal)
require(plyr)
require(dplyr)
setwd("C:/github/NEON_veg_structure/")
# First we bring in the reference points from NEON reference data
ref.points <- read.csv("./data/pointID_spatialData_towerPlots.csv")
str(ref.points)
# Then we bring in all of the tree marker data. This is every tree, by tag, in a plot
# with a spatial ID tag and azimuth
tree.mapping.data <- read.csv("./data/vst_mappingTagging2015_goughSites.csv")
sum(is.na(tree.mapping.data$pointID))
df.tree <- join(tree.mapping.data, ref.points, type = "left", match = "all")
View(df.tree)
View(df.tree)
df$plotID
sum(is.na(tree.mapping.data$pointID))
# notes from Atticus
x <- distance * cos(theta)
y <- distance * sin(theta)
# the theta is stemAzimuth
# distance is stemDistance
# Now we use Trig, hopefully
df.tree$x <- df.tree$stemDistance * cos(df.tree$stemAzimuth)
df.tree$y <- df.tree$stemDistance * sin(df.tree$stemAzimuth)
# Then we add our x and y values
df.tree$tree.easting <- df.tree$easting + df.tree$x
df.tree$tree.northing <- df.tree$northing + df.tree$y
tree.info <- read.csv("./data/vst_apparentIndiv2015_goughSites.csv")
# Now let's look at table data
dim(df.tree)
dim(tree.info)
df <- join(df.tree, tree.info, type = "left", match = "all")
dim(df)
str(df)
df$scientificName <- tolower(df$scientificName)
df$growthForm <- tolower(df$growthForm)
unique(df$scientificName)
sp.table <- table(df$scientificName, df$plotID)
sp.table <-as.data.frame(sp.table)
df %>%
group_by(plotID) %>% summarize(n_distinct(scientificName)) -> df.plot
data.frame(df.plot)
View(df)
View(df)
dim(df)
write.csv(df, file = "NEON_veg_mapping_data_merged.CSV")
unique(df$taxonID)
df <- join(df.tree, tree.info, type = "left", match = "all")
df$growthForm <- tolower(df$growthForm)
#look at only trees
df <- subset(df, df$growthForm == "sbt" | df$growthForm == "mbt" | df$growthForm == "smt")
#organize the names
df$scientificName <- tolower(df$scientificName)
df$growthForm <- tolower(df$growthForm)
unique(df$scientificName)
sp.table <- table(df$TaxonID, df$plotID)
sp.table <-as.data.frame(sp.table)
table(df$TaxonID, df$plotID)
str(df)
unique(df$taxonID)
sp.table <- table(df$taxonID, df$plotID)
sp.table <-as.data.frame(sp.table)
sp.table
df %>%
group_by(plotID) %>% summarize(n_distinct(taxonID)) -> df.plot
data.frame(df.plot)
#Now the site level
df %>%
group_by(siteID) %>% summarize(n_distinct(taxonID)) -> df.site
df.site
unique(df$growthForm)
unique(df$taxonID)
taxon <- unique(df$taxonID)
taxon
taxon <- data.frame(unique(df$taxonID))
taxon
taxon <- taxon[order(unique.df.taxonID.),]
taxon <- taxon[order(taxon$unique.df.taxonID.),]
taxon
taxon <- taxon[order(taxon$unique.df.taxonID.),]
data.frame(taxon)
df$taxonID <- toupper(df$taxonID)
taxon <- data.frame(unique(df$taxonID))
taxon <- taxon[order(taxon$unique.df.taxonID.),]
data.frame(taxon)
df$taxonID <- trimws(df$taxonID, which = "both")
#
taxon <- data.frame(unique(df$taxonID))
taxon <- taxon[order(taxon$unique.df.taxonID.),]
data.frame(taxon)
df$taxonID[df$taxonID == "QUERCUS"] <- "QUERC"
taxon <- data.frame(unique(df$taxonID))
taxon <- taxon[order(taxon$unique.df.taxonID.),]
data.frame(taxon)
df %>%
group_by(plotID) %>% summarize(n_distinct(taxonID)) -> df.plot
data.frame(df.plot)
#Now the site level
df %>%
group_by(siteID) %>% summarize(n_distinct(taxonID)) -> df.site
df.site
df
View(df)
View(df)
df %>%
group_by(siteID) %>% summarize(n_distinct(scientificName)) -> df.site
df.site
